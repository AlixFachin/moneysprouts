"""initial

Revision ID: 9f323e405fe8
Revises: 
Create Date: 2021-06-01 16:56:20.397573

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = '9f323e405fe8'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    users = op.create_table('users',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('username', sa.String(length=65), nullable=False),
    sa.Column('email', sa.String(length=120), nullable=False),
    sa.Column('password', sa.String(length=200), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('last_modified', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('email'),
    sa.UniqueConstraint('password'),
    sa.UniqueConstraint('username')
    )

    budget = op.create_table('budget',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('monthly_budget', sa.Float(), nullable=False),
    sa.Column('groceries_alloc', sa.Float(), nullable=False),
    sa.Column('bills_alloc', sa.Float(), nullable=False),
    sa.Column('transport_alloc', sa.Float(), nullable=False),
    sa.Column('misc_alloc', sa.Float(), nullable=False),
    sa.Column('savings_target', sa.Float(), nullable=False),
    sa.Column('monthly_income', sa.Float(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )

    category = op.create_table('category',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('category_name', sa.String(length=60), nullable=False),
    sa.Column('category_description', sa.Text(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )

    eco_goal = op.create_table('eco_goal',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('goal_name', sa.Text(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )

    expense = op.create_table('expense',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('category_id', sa.Integer(), nullable=False),
    sa.Column('expense_description', sa.Text(), nullable=True),
    sa.Column('amount', sa.Float(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('last_modified', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['category_id'], ['category.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )

    eco_action = op.create_table('eco_action',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('eco_goal_id', sa.Integer(), nullable=False),
    sa.Column('expense_id', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['eco_goal_id'], ['eco_goal.id'], ),
    sa.ForeignKeyConstraint(['expense_id'], ['expense.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )

    op.bulk_insert(users, [{"username": "roberto",	"email":"roberto@gmail.com", "password":"password"}])
    op.bulk_insert(category, [
        {
            "user_id": 1,
            "category_name": "Groceries",
            "category_description": "Food"
        },
        {
            "user_id": 1,
            "category_name": "Transport",
            "category_description": "Transport"
        },
        {
            "user_id": 1,
            "category_name": "Misc",
            "category_description": "Whatever"
        },
        {
            "user_id": 1,
            "category_name": "Bills",
            "category_description": "Bills"
        }
    ])
    op.bulk_insert(expense, [
        {
            "user_id": 1,
            "category_id": 1,
            "expense_description": "Grocery Store",
            "amount": 3000
        },
        {
            "user_id": 1,
            "category_id": 2,
            "expense_description": "Monthly subway expense",
            "amount": 10000
        },
        {
            "user_id": 1,
            "category_id": 1,
            "expense_description": "Convenience bento",
            "amount": 500
        },
        {
            "user_id": 1,
            "category_id": 4,
            "expense_description": "Electricity bill May",
            "amount": 5000
        },
        {
            "user_id": 1,
            "category_id": 1,
            "expense_description": "Restaurant dinner",
            "amount": 2500
        },
        {
            "user_id": 1,
            "category_id": 3,
            "expense_description": "Haircut",
            "amount": 5000
        },
        {
            "user_id": 1,
            "category_id": 3,
            "expense_description": "Beer",
            "amount": 2000
        },
        {
            "user_id": 1,
            "category_id": 4,
            "expense_description": "Water bill May",
            "amount": 3000
        },
        {
            "user_id": 1,
            "category_id": 1,
            "expense_description": "Grocery Store",
            "amount": 2000
        },
        {
            "user_id": 1,
            "category_id": 2,
            "expense_description": "Bus",
            "amount": 500
        },
        {
            "user_id": 1,
            "category_id": 1,
            "expense_description": "Grocery Store",
            "amount": 4000
        },
        {
            "user_id": 1,
            "category_id": 2,
            "expense_description": "Subway",
            "amount": 600
        },
        {
            "user_id": 1,
            "category_id": 3,
            "expense_description": "Chair",
            "amount": 7000
        },
        {
            "user_id": 1,
            "category_id": 3,
            "expense_description": "Cushion",
            "amount": 3000
        },
        {
            "user_id": 1,
            "category_id": 2,
            "expense_description": "Subway",
            "amount": 600
        }, 
        {
            "user_id": 1,
            "category_id": 4,
            "expense_description": "Gas bill May",
            "amount": 2000
        }, 
        {
            "user_id": 1,
            "category_id": 1,
            "expense_description": "Grocery Store",
            "amount": 1500
        }, 
        {
            "user_id": 1,
            "category_id": 1,
            "expense_description": "Grocery Store",
            "amount": 1800
        }, 
        {
            "user_id": 1,
            "category_id": 3,
            "expense_description": "Manicure",
            "amount": 4000
        }, 
        {
            "user_id": 1,
            "category_id": 2,
            "expense_description": "Subway",
            "amount": 600
        }, 
        {
            "user_id": 1,
            "category_id": 4,
            "expense_description": "Rent",
            "amount": 70000
        }, 
    ])
    op.bulk_insert(eco_goal, [
        {
            "user_id": 1,
            "goal_name":"Eco bag/no bag"
        }, 
        {
            "user_id": 1,
            "goal_name":"No impulse purchase"
        }, 
        {
            "user_id": 1,
            "goal_name":"Eco conscious tranport"
        }, 
        {
            "user_id": 1,
            "goal_name":"No action"
        }, 
    ])
    op.bulk_insert(eco_action, [
        {
            "user_id": 1,
            "eco_goal_id": 4,
            "expense_id": 1            
        },
        {
            "user_id": 1,
            "eco_goal_id": 3,
            "expense_id": 2            
        },
        {
            "user_id": 1,
            "eco_goal_id": 3,
            "expense_id": 3            
        },
        {
            "user_id": 1,
            "eco_goal_id": 1,
            "expense_id": 3            
        },
        {
            "user_id": 1,
            "eco_goal_id": 2,
            "expense_id": 5            
        },
        {
            "user_id": 1,
            "eco_goal_id": 1,
            "expense_id": 6            
        },
        {
            "user_id": 1,
            "eco_goal_id": 1,
            "expense_id": 7            
        },
        {
            "user_id": 1,
            "eco_goal_id": 2,
            "expense_id": 9            
        },
        {
            "user_id": 1,
            "eco_goal_id": 1,
            "expense_id": 9            
        },
        {
            "user_id": 1,
            "eco_goal_id": 3,
            "expense_id": 10            
        },
        {
            "user_id": 1,
            "eco_goal_id": 1,
            "expense_id": 11            
        },
        {
            "user_id": 1,
            "eco_goal_id": 3,
            "expense_id": 12            
        },
        {
            "user_id": 1,
            "eco_goal_id": 1,
            "expense_id": 13            
        },
        {
            "user_id": 1,
            "eco_goal_id": 1,
            "expense_id": 14            
        },
        {
            "user_id": 1,
            "eco_goal_id": 3,
            "expense_id": 15            
        },
        {
            "user_id": 1,
            "eco_goal_id": 1,
            "expense_id": 17            
        },
        {
            "user_id": 1,
            "eco_goal_id": 2,
            "expense_id": 17            
        },
        {
            "user_id": 1,
            "eco_goal_id": 1,
            "expense_id": 18            
        },
        {
            "user_id": 1,
            "eco_goal_id": 3,
            "expense_id": 19            
        },
        {
            "user_id": 1,
            "eco_goal_id": 3,
            "expense_id": 20            
        },
    ])
    op.bulk_insert(budget, [{
        "user_id": 1,
        "monthly_budget": 87000,
        "groceries_alloc": 40000,
        "bills_alloc": 12000,
        "transport_alloc": 15000,
        "misc_alloc": 20000,
        "savings_target": 60000,
        "monthly_income": 250000
    }])
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('eco_action')
    op.drop_table('expense')
    op.drop_table('eco_goal')
    op.drop_table('category')
    op.drop_table('budget')
    op.drop_table('users')
    # ### end Alembic commands ###
